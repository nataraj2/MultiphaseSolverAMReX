module rhs_helmholtz
  use amrex_base_module
  use amrex_amr_module
  use amr_data_module
  use fillpatch_module

  implicit none
  private
  public ::  init_prob_start, init_prob_data, compute_helmholtz_rhs

  real(amrex_real), private, parameter :: a = 1.0d0
  real(amrex_real), private, parameter :: b = 1.0d0

contains

  subroutine init_prob_start(ilev)
 
    integer, intent(in) :: ilev
    type(amrex_box) :: bx, gbx
    type(amrex_mfiter) :: mfi
    real(amrex_real), contiguous, dimension(:,:,:,:), pointer :: phi
    integer :: nlevs
    integer :: tilecount

       call amrex_mfiter_build(mfi, phi_new(ilev), tiling=.true.)
       tilecount=0
       do while (mfi%next())
	tilecount=tilecount+1
          bx  =  mfi%tilebox()
          gbx =  mfi%growntilebox(1)
          phi => phi_new(ilev)%dataptr(mfi)

	  call init_prob_data(ilev, t_new(ilev), bx%lo, bx%hi, phi(:,:,:,1),phi(:,:,:,2),phi(:,:,:,3),phi(:,:,:,4),phi(:,:,:,5),phi(:,:,:,6),&
							       phi(:,:,:,7),phi(:,:,:,8),phi(:,:,:,9),phi(:,:,:,10),phi(:,:,:,11),&
							       lbound(phi), ubound(phi), &
               amrex_geom(ilev)%dx, amrex_problo)

       end do
	print*,tilecount

       call amrex_mfiter_destroy(mfi)

       !call Pmfab(ilev)%setVal(0.0_amrex_real)

  end subroutine init_prob_start

  subroutine init_prob_data(level, time, lo, hi, &
     Grho, GrhoU, GrhoV, GrhoW, GrhoE, &
     Lrho, LrhoU, LrhoV, LrhoW, LrhoE, &
     VOF, var_lo, var_hi,&
     dx, prob_lo) bind(C, name="initdata")

  use precision

  implicit none
  integer, intent(in) :: level, lo(3), hi(3), var_lo(3), var_hi(3)
  double precision, intent(in) :: time
  double precision, intent(inout), dimension(var_lo(1):var_hi(1),var_lo(2):var_hi(2),var_lo(3):var_hi(3)) :: Grho,GrhoU,GrhoV,GrhoW,GrhoE,Lrho,LrhoU,LrhoV,LrhoW,LrhoE,VOF
  double precision, intent(in) :: dx(3), prob_lo(3)
  integer          :: dm
  integer          :: i,j,k,ii,jj
  double precision :: x,y,z,r2
  integer, parameter :: nfine=50

   ! Loop over full field and create initial distance - Zalesak
  VOF=0.0_WP
  Grho=0.0_WP
  GrhoU=0.0_WP
  GrhoV=0.0_WP
  GrhoW=0.0_WP
  GrhoE=0.0_WP
  Lrho=0.0_WP
  LrhoU=0.0_WP
  LrhoV=0.0_WP
  LrhoW=0.0_WP
  LrhoE=0.0_WP
 do k=lo(3),hi(3)
    do j=lo(2),hi(2)
        y = dble(j)*dx(2) + prob_lo(2)
        do i=lo(1),hi(1)
           x = dble(i)*dx(1) + prob_lo(1)
           ! Get Zalesak distance on submesh
           do jj=1,nfine
              do ii=1,nfine
                 if (init_zalesak((/x+(real(ii-1,WP)+0.5_WP)*dx(1)/real(nfine,WP),&
                   &             y+(real(jj-1,WP)+0.5_WP)*dx(2)/real(nfine,WP),0.0_WP/),&
                   &           (/0.0_WP,0.25_WP,0.0_WP/),0.15_WP,0.05_WP,0.25_WP).gt.0.0_WP) then
                  VOF(i,j,k)=VOF(i,j,k)+1.0_WP/(nfine**2)
                 end if
              end do
           end do
         end do
     end do
   end do

contains

  ! Zalesak disk initialization
  function init_zalesak(xyz,center,radius,width,height)
    implicit none
    real(WP) :: init_zalesak
    real(WP), dimension(3), intent(in) :: xyz,center
    real(WP), intent(in) :: radius,width,height
    real(WP) :: c,b,b1,b2,h1,h2
    c = radius-sqrt(sum((xyz-center)**2))
    b1 = center(1)-0.5_WP*width
    b2 = center(1)+0.5_WP*width
    h1 = center(2)-radius*cos(asin(0.5_WP*width/radius))
    h2 = center(2)-radius+height
    if     (c>=0.0_WP.and.xyz(1)<=b1.and.xyz(2)<=h2) then
       b = b1-xyz(1)
       init_zalesak = min(c,b)
    elseif (c>=0.0_WP.and.xyz(1)>=b2.and.xyz(2)<=h2) then
       b = xyz(1)-b2
       init_zalesak = min(c,b)
    elseif (c>=0.0_WP.and.xyz(1)>=b1.and.xyz(1)<=b2.and.xyz(2)>=h2) then
       b = xyz(2)-h2
       init_zalesak = min(c,b)
    elseif (c>=0.0_WP.and.xyz(1)<=b1.and.xyz(2)>=h2) then
       b = sqrt(sum((xyz-(/b1,h2,0.0_WP/))**2))
       init_zalesak = min(c,b)
    elseif (c>=0.0_WP.and.xyz(1)>=b2.and.xyz(2)>=h2) then
       b = sqrt(sum((xyz-(/b2,h2,0.0_WP/))**2))
       init_zalesak = min(c,b)
    elseif (xyz(1)>=b1.and.xyz(1)<=b2.and.xyz(2)<=h2.and.xyz(2)>=h1) then
       init_zalesak = -min(abs(xyz(1)-b1),abs(xyz(1)-b2),abs(xyz(2)-h2))
    elseif (xyz(1)>=b1.and.xyz(1)<=b2.and.xyz(2)<=h1) then
       init_zalesak = -min(sqrt(sum((xyz-(/b1,h1,0.0_WP/))**2)),sqrt(sum((xyz-(/b2,h1,0.0_WP/))**2)))
    else
       init_zalesak = c
    endif
  end function init_zalesak

 end subroutine init_prob_data

  subroutine compute_helmholtz_rhs
   
    implicit none

    integer :: ilev
    integer :: clo(4), chi(4), borlo(4), borhi(4), fxlo(4), fxhi(4), fylo(4), fyhi(4), fzlo(4), fzhi(4), betalo(4), betahi(4)
    type(amrex_box) :: bx
    type(amrex_mfiter) :: mfi
    real(amrex_real), contiguous, dimension(:,:,:,:), pointer :: phiconsptr,phi,phi_nborptr,Ufaceptr,Vfaceptr,Wfaceptr,rhsptr,alphaptr
    integer :: nlevs
    integer, parameter :: ngrow = 3
    type(amrex_multifab) :: phi_mp_nbormfab
    real(amrex_real) :: time
    integer :: nc,ng,idim
    logical :: nodal(3)

    time=0.0d0

    nlevs = amrex_get_finest_level()

    do ilev = 0, nlevs

      call amrex_multifab_build(Pmfab(ilev), phi_new(ilev)%ba, phi_new(ilev)%dm, nc=1, ng=1)
      call amrex_multifab_build(exact_solution(ilev), phi_new(ilev)%ba, phi_new(ilev)%dm, nc=1, ng=0)
      call amrex_multifab_build(rhs(ilev), phi_new(ilev)%ba, phi_new(ilev)%dm, nc=1, ng=0)
      call amrex_multifab_build(acoef(ilev), phi_new(ilev)%ba, phi_new(ilev)%dm, nc=1, ng=0)

      do idim = 1, amrex_spacedim
          nodal = .false.
          nodal(idim) = .true.
          call amrex_multifab_build(gradPmfab(idim,ilev), phi_new(ilev)%ba, phi_new(ilev)%dm, 1, 0, nodal)
       end do 
   enddo
 
    do ilev = 0, nlevs

       call amrex_multifab_build(phi_mp_nbormfab, phi_n(ilev)%ba, phi_n(ilev)%dm, ncomp, ngrow)
       call fillpatch (ilev, time, phi_mp_nbormfab, phi_mp_n, phi_mp_n)

       call amrex_mfiter_build(mfi, phi_new(ilev), tiling=.true.)
       do while (mfi%next())
          bx = mfi%tilebox()
	  phiconsptr   => phi_new(ilev)%dataptr(mfi)
          phi          => phi_mp(ilev)%dataptr(mfi)
          phi_nborptr  => phi_mp_nbormfab%dataptr(mfi)
	  alphaptr     => acoef(ilev)%dataptr(mfi)
	  Ufaceptr   => facevelmfab(1,ilev)%dataptr(mfi)
	  Vfaceptr   => facevelmfab(2,ilev)%dataptr(mfi)
	  Wfaceptr   => facevelmfab(3,ilev)%dataptr(mfi)
          rhsptr       => rhs(ilev) % dataptr(mfi)
          clo    = lbound(phi)
          chi    = ubound(phi)
	  borlo  = lbound(phi_nborptr)
          borhi  = ubound(phi_nborptr)
	  fxlo    = lbound(Ufaceptr)
          fxhi    = ubound(Ufaceptr)
	  fylo    = lbound(Vfaceptr)
          fyhi    = ubound(Vfaceptr)
	  fzlo    = lbound(Wfaceptr)
          fzhi    = ubound(Wfaceptr)

          call helmholtz_rhs(ilev, bx%lo, bx%hi,&
			     phi(:,:,:,1),phi(:,:,:,2),phi(:,:,:,3),phi(:,:,:,4),phi(:,:,:,5),phiconsptr(:,:,:,11),alphaptr,clo,chi,&
			     phi_nborptr(:,:,:,1),phi_nborptr(:,:,:,2),phi_nborptr(:,:,:,3),phi_nborptr(:,:,:,4),phi_nborptr(:,:,:,5),borlo,borhi,&
			     Ufaceptr,fxlo,fxhi,Vfaceptr,fylo,fyhi,Wfaceptr,fzlo,fzhi,rhsptr,amrex_geom(ilev)%dx, amrex_problo)

       end do
       call amrex_mfiter_destroy(mfi)

       call amrex_multifab_destroy(phi_mp_nbormfab)

       call Pmfab(ilev)%setVal(0.0_amrex_real)

    end do
  

  end subroutine compute_helmholtz_rhs


  subroutine helmholtz_rhs(level,lo,hi,RHO,rhoU,rhoV,rhoW,rhoE,VOF,alpha,clo,chi,&
			   RHO_n,rhoU_n,rhoV_n,rhoW_n,rhoE_n,borlo,borhi,&
			   Uface,fxlo,fxhi,Vface,fylo,fyhi,Wface,fzlo,fzhi,rhs,dx,prob_lo)
 
  implicit none
  integer, intent(in) :: level, lo(3), hi(3), clo(4), chi(4), borlo(4), borhi(4), fxlo(4), fxhi(4), fylo(4), fyhi(4), fzlo(4), fzhi(4)
  double precision, dimension(clo(1):chi(1),clo(2):chi(2),clo(3):chi(3)) :: RHO,rhoU,rhoV,rhoW,rhoE,VOF,alpha,rhs
  double precision, dimension(borlo(1):borhi(1),borlo(2):borhi(2),borlo(3):borhi(3)) :: RHO_n,rhoU_n,rhoV_n,rhoW_n,rhoE_n
  double precision, dimension(fxlo(1):fxhi(1),fxlo(2):fxhi(2),fxlo(3):fxhi(3)) :: Uface
  double precision, dimension(fylo(1):fyhi(1),fylo(2):fyhi(2),fylo(3):fyhi(3)) :: Vface
  double precision, dimension(fzlo(1):fzhi(1),fzlo(2):fzhi(2),fzlo(3):fzhi(3)) :: Wface
  double precision, intent(in) :: dx(3), prob_lo(3)
  integer          :: i,j,k
  double precision :: x,y,z
  real(amrex_real) :: PA, P_n, spdsnd
  real(amrex_real) :: pi
  double precision, parameter :: gamma_g=1.4d0, gamma_l=4.4d0, Pref_g=0.0d0, Pref_l=6.0d8
  double precision :: gamma_mix, Pref

    ascalar=a
    bscalar=b

  pi = 4.d0 * atan(1.d0)

  do k = lo(3), hi(3)
       z = prob_lo(3) + dx(3) * (dble(k)+0.5d0)
       do j = lo(2), hi(2)
          y = prob_lo(2) + dx(2) * (dble(j)+0.5d0)
          do i = lo(1), hi(1)
             x = prob_lo(1) + dx(1) * (dble(i)+0.5d0)
               
	     ! Mixing rules from Shukla's 2010 JCP
             gamma_mix=1.0d0+(gamma_l-1.0d0)*(gamma_g-1.0d0)/(VOF(i,j,k)*(gamma_g-1.0d0)+(1.0d0-VOF(i,j,k))*(gamma_l-1.0d0))
             Pref=(gamma_mix-1.0d0)/gamma_mix*(VOF(i,j,k)*gamma_l*Pref_l/(gamma_l-1.0d0)+(1.0d0-VOF(i,j,k))*gamma_g*Pref_g/(gamma_g-1.0d0))
	     PA=(gamma_mix-1.0d0)*(rhoE(i,j,k)-0.5d0*(rhoU(i,j,k)**2+rhoV(i,j,k)**2+rhoW(i,j,k)**2)/RHO(i,j,k))-gamma_mix*Pref
	     P_n=(gamma_mix-1.0d0)*(rhoE_n(i,j,k)-0.5d0*(rhoU_n(i,j,k)**2+rhoV_n(i,j,k)**2+rhoW_n(i,j,k)**2)/RHO_n(i,j,k))-gamma_mix*Pref
	     spdsnd=(gamma_mix*(P_n+Pref)/RHO_n(i,j,k))**0.5d0
             !P(i,j,k)=(gamma_mix-1.0d0)*(rhoE(i,j,k)-0.5d0*RHO(i,j,k)*(U(i,j,k)**2+V(i,j,k)**2+W(i,j,k)**2))-gamma_mix*my_Pref
             !spdsnd=sqrt(gamma_mix*(P(i,j,k)+my_Pref)/RHO(i,j,k))
 
             alpha(i,j,k) = 1.0d0/(RHO_n(i,j,k)*spdsnd**2*dt_step**2)
	     rhs(i,j,k) = PA/(RHO_n(i,j,k)*spdsnd**2*dt_step**2)-( (Uface(i+1,j,k)-Uface(i,j,k))/(dx(1)*dt_step)+&
						  		   (Vface(i,j+1,k)-Vface(i,j,k))/(dx(2)*dt_step)+&
						  		   (Wface(i,j,k+1)-Wface(i,j,k))/(dx(3)*dt_step) )

	
          end do
       end do
    end do

  end subroutine helmholtz_rhs

end module rhs_helmholtz
