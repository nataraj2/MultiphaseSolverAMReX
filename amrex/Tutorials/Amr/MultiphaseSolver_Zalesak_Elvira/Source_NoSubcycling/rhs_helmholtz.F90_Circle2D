module rhs_helmholtz
  use amrex_base_module
  use amrex_amr_module
  use amr_data_module
  use fillpatch_module

  implicit none
  private
  public ::  init_prob_start, init_prob_data, compute_helmholtz_rhs

  real(amrex_real), private, parameter :: a = 1.0d0
  real(amrex_real), private, parameter :: b = 1.0d0

contains

  subroutine init_prob_start(ilev)
 
    integer, intent(in) :: ilev
    type(amrex_box) :: bx, gbx
    type(amrex_mfiter) :: mfi
    real(amrex_real), contiguous, dimension(:,:,:,:), pointer :: phi
    integer :: nlevs


       call amrex_mfiter_build(mfi, phi_new(ilev), tiling=.true.)
       
       do while (mfi%next())
          bx  =  mfi%tilebox()
          gbx =  mfi%growntilebox(1)
          phi => phi_new(ilev)%dataptr(mfi)

	  call init_prob_data(ilev, t_new(ilev), bx%lo, bx%hi, phi(:,:,:,1),phi(:,:,:,2),phi(:,:,:,3),phi(:,:,:,4),phi(:,:,:,5),phi(:,:,:,6),&
							       phi(:,:,:,7),phi(:,:,:,8),phi(:,:,:,9),phi(:,:,:,10),phi(:,:,:,11),&
							       lbound(phi), ubound(phi), &
               amrex_geom(ilev)%dx, amrex_problo)

       end do

       call amrex_mfiter_destroy(mfi)

       !call Pmfab(ilev)%setVal(0.0_amrex_real)

  end subroutine init_prob_start

  subroutine init_prob_data(level, time, lo, hi, &
     Grho, GrhoU, GrhoV, GrhoW, GrhoE, &
     Lrho, LrhoU, LrhoV, LrhoW, LrhoE, &
     VOF, var_lo, var_hi,&
     dx, prob_lo) bind(C, name="initdata")

  implicit none
  integer, intent(in) :: level, lo(3), hi(3), var_lo(3), var_hi(3)
  double precision, intent(in) :: time
  double precision, intent(inout), dimension(var_lo(1):var_hi(1),var_lo(2):var_hi(2),var_lo(3):var_hi(3)) :: Grho,GrhoU,GrhoV,GrhoW,GrhoE,Lrho,LrhoU,LrhoV,LrhoW,LrhoE,VOF
  double precision, intent(in) :: dx(3), prob_lo(3)
  integer          :: i,j,k
  double precision :: x,y,z,r2
  real(amrex_real) :: pi
double precision :: droprad,delxcell,delycell,delzcell,delx,dely,delz,rad,radfine,vofcell,xfine,yfine,zfine
  integer :: icell,jcell,kcell,nfine,xcennum,ycennum,zcennum
  double precision :: xcen(5),ycen(5), zcen(5)

  droprad=0.15d0
  delx=dx(1)
  dely=dx(2)
  delz=dx(3)

  nfine=10

  ! Create an array of droplets

  xcen(1)=-0.4d0
  xcen(2)=-0.2d0
  xcen(3)=-0.0d0
  xcen(4)=0.2d0
  xcen(5)=0.4d0

  ycen(1)=-0.4d0
  ycen(2)=-0.2d0
  ycen(3)=-0.0d0
  ycen(4)=0.2d0
  ycen(5)=0.4d0

  zcen(3)=-0.0d0

do zcennum=3,3
  do xcennum=3,3
    do ycennum=3,3
      do k=lo(3),hi(3)
        do j=lo(2),hi(2)
           do i=lo(1),hi(1)

                Grho(i,j,k)=0.0d0
                GrhoU(i,j,k)=0.0d0
                GrhoV(i,j,k)=0.0d0
     	        GrhoW(i,j,k)=0.0d0
                GrhoE(i,j,k)=0.0d0
                Lrho(i,j,k)=0.0d0
                LrhoU(i,j,k)=0.0d0
                LrhoV(i,j,k)=0.0d0
                LrhoW(i,j,k)=0.0d0
                LrhoE(i,j,k)=0.0d0
                VOF(i,j,k)=0.0d0

                x=prob_lo(1)+(dble(i)+0.5d0)*dx(1)
                y=prob_lo(2)+(dble(j)+0.5d0)*dx(2)
                z=prob_lo(3)+(dble(k)+0.5d0)*dx(3)

            rad=dsqrt((prob_lo(1)+(dble(i)+0.5d0)*dx(1)-xcen(xcennum))**2+(prob_lo(2)+(dble(j)+0.5d0)*dx(2)-ycen(ycennum))**2)
            if(abs(droprad-rad)<=dsqrt(delx**2+dely**2))then
                delxcell=dx(1)/nfine
                delycell=dx(2)/nfine
                vofcell=0.0
              do jcell=1,nfine
                   do icell=1,nfine
                        xfine=prob_lo(1)+dble(i)*dx(1)+(icell-1)*delxcell+delxcell/2.0
                        yfine=prob_lo(2)+dble(j)*dx(2)+(jcell-1)*delycell+delycell/2.0
                        radfine=dsqrt((xfine-xcen(xcennum))**2+(yfine-ycen(ycennum))**2)
                        if(droprad-radfine>=dsqrt(delxcell**2+delycell**2))then
                                vofcell=vofcell+delxcell*delycell
                        endif
                    enddo
              enddo
                VOF(i,j,k)=vofcell/(delx*dely)
             endif

             if(droprad-rad>=dsqrt(delx**2+dely**2))then
                VOF(i,j,k)=1.0d0
             endif

		!if(x.ge.0.0d0)VOF(i,j,k)=1.0d0

            enddo
          enddo
        enddo
      enddo
    enddo
  enddo

 end subroutine init_prob_data

  subroutine compute_helmholtz_rhs
   
    implicit none

    integer :: ilev
    integer :: clo(4), chi(4), borlo(4), borhi(4), fxlo(4), fxhi(4), fylo(4), fyhi(4), fzlo(4), fzhi(4), betalo(4), betahi(4)
    type(amrex_box) :: bx
    type(amrex_mfiter) :: mfi
    real(amrex_real), contiguous, dimension(:,:,:,:), pointer :: phiconsptr_n,phiconsptr_new,phi,phi_nborptr,Ufaceptr,Vfaceptr,Wfaceptr,rhsptr,alphaptr
    integer :: nlevs
    integer, parameter :: ngrow = 3
    type(amrex_multifab) :: phi_mp_nbormfab
    real(amrex_real) :: time
    integer :: nc,ng,idim
    logical :: nodal(3)

    time=0.0d0

    nlevs = amrex_get_finest_level()

    do ilev = 0, nlevs

      call amrex_multifab_build(Pmfab(ilev), phi_new(ilev)%ba, phi_new(ilev)%dm, nc=1, ng=1)
      call amrex_multifab_build(exact_solution(ilev), phi_new(ilev)%ba, phi_new(ilev)%dm, nc=1, ng=0)
      call amrex_multifab_build(rhs(ilev), phi_new(ilev)%ba, phi_new(ilev)%dm, nc=1, ng=0)
      call amrex_multifab_build(acoef(ilev), phi_new(ilev)%ba, phi_new(ilev)%dm, nc=1, ng=0)

      do idim = 1, amrex_spacedim
          nodal = .false.
          nodal(idim) = .true.
          call amrex_multifab_build(gradPmfab(idim,ilev), phi_new(ilev)%ba, phi_new(ilev)%dm, 1, 0, nodal)
       end do 
   enddo
 
    do ilev = 0, nlevs

       call amrex_multifab_build(phi_mp_nbormfab, phi_n(ilev)%ba, phi_n(ilev)%dm, ncomp, ngrow)
       call fillpatch (ilev, time, phi_mp_nbormfab, phi_mp_n, phi_mp_n)

       call amrex_mfiter_build(mfi, phi_new(ilev), tiling=.true.)
       do while (mfi%next())
          bx = mfi%tilebox()
	  phiconsptr_n   => phi_n(ilev)%dataptr(mfi)
	  phiconsptr_new   => phi_new(ilev)%dataptr(mfi)
          phi          => phi_mp(ilev)%dataptr(mfi)
          !phi_nborptr  => phi_mp_nbormfab%dataptr(mfi)
          phi_nborptr  => phi_mp_n(ilev)%dataptr(mfi)
	  alphaptr     => acoef(ilev)%dataptr(mfi)
	  Ufaceptr   => facevelmfab(1,ilev)%dataptr(mfi)
	  Vfaceptr   => facevelmfab(2,ilev)%dataptr(mfi)
	  Wfaceptr   => facevelmfab(3,ilev)%dataptr(mfi)
          rhsptr       => rhs(ilev) % dataptr(mfi)
          clo    = lbound(phi)
          chi    = ubound(phi)
	  borlo  = lbound(phi_nborptr)
          borhi  = ubound(phi_nborptr)
	  fxlo    = lbound(Ufaceptr)
          fxhi    = ubound(Ufaceptr)
	  fylo    = lbound(Vfaceptr)
          fyhi    = ubound(Vfaceptr)
	  fzlo    = lbound(Wfaceptr)
          fzhi    = ubound(Wfaceptr)

          call helmholtz_rhs(ilev, bx%lo, bx%hi,&
			     phi(:,:,:,1),phi(:,:,:,2),phi(:,:,:,3),phi(:,:,:,4),phi(:,:,:,5),phiconsptr_n(:,:,:,11),phiconsptr_new(:,:,:,11),alphaptr,clo,chi,&
			     phi_nborptr(:,:,:,1),phi_nborptr(:,:,:,2),phi_nborptr(:,:,:,3),phi_nborptr(:,:,:,4),phi_nborptr(:,:,:,5),borlo,borhi,&
			     Ufaceptr,fxlo,fxhi,Vfaceptr,fylo,fyhi,Wfaceptr,fzlo,fzhi,rhsptr,amrex_geom(ilev)%dx, amrex_problo)

       end do
       call amrex_mfiter_destroy(mfi)

       call amrex_multifab_destroy(phi_mp_nbormfab)

       call Pmfab(ilev)%setVal(0.0_amrex_real)

    end do
  

  end subroutine compute_helmholtz_rhs


  subroutine helmholtz_rhs(level,lo,hi,RHO,rhoU,rhoV,rhoW,rhoE,VOF_n,VOF_new,alpha,clo,chi,&
			   RHO_n,rhoU_n,rhoV_n,rhoW_n,rhoE_n,borlo,borhi,&
			   Uface,fxlo,fxhi,Vface,fylo,fyhi,Wface,fzlo,fzhi,rhs,dx,prob_lo)
 
  implicit none
  integer, intent(in) :: level, lo(3), hi(3), clo(4), chi(4), borlo(4), borhi(4), fxlo(4), fxhi(4), fylo(4), fyhi(4), fzlo(4), fzhi(4)
  double precision, dimension(clo(1):chi(1),clo(2):chi(2),clo(3):chi(3)) :: RHO,rhoU,rhoV,rhoW,rhoE,VOF_n,VOF_new,alpha,rhs
  double precision, dimension(borlo(1):borhi(1),borlo(2):borhi(2),borlo(3):borhi(3)) :: RHO_n,rhoU_n,rhoV_n,rhoW_n,rhoE_n
  double precision, dimension(fxlo(1):fxhi(1),fxlo(2):fxhi(2),fxlo(3):fxhi(3)) :: Uface
  double precision, dimension(fylo(1):fyhi(1),fylo(2):fyhi(2),fylo(3):fyhi(3)) :: Vface
  double precision, dimension(fzlo(1):fzhi(1),fzlo(2):fzhi(2),fzlo(3):fzhi(3)) :: Wface
  double precision, intent(in) :: dx(3), prob_lo(3)
  integer          :: i,j,k
  double precision :: x,y,z
  real(amrex_real) :: PA, P_n, spdsnd
  real(amrex_real) :: pi
  double precision, parameter :: gamma_g=1.4d0, gamma_l=4.4d0, Pref_g=0.0d0, Pref_l=6.0d8
  double precision :: gamma_mix_n, gamma_mix_new, Pref_n, Pref_new

    ascalar=a
    bscalar=b

  pi = 4.d0 * atan(1.d0)

  do k = lo(3), hi(3)
       z = prob_lo(3) + dx(3) * (dble(k)+0.5d0)
       do j = lo(2), hi(2)
          y = prob_lo(2) + dx(2) * (dble(j)+0.5d0)
          do i = lo(1), hi(1)
             x = prob_lo(1) + dx(1) * (dble(i)+0.5d0)
               
	     ! Mixing rules from Shukla's 2010 JCP
             gamma_mix_n=1.0d0+(gamma_l-1.0d0)*(gamma_g-1.0d0)/(VOF_n(i,j,k)*(gamma_g-1.0d0)+(1.0d0-VOF_n(i,j,k))*(gamma_l-1.0d0))
             gamma_mix_new=1.0d0+(gamma_l-1.0d0)*(gamma_g-1.0d0)/(VOF_new(i,j,k)*(gamma_g-1.0d0)+(1.0d0-VOF_new(i,j,k))*(gamma_l-1.0d0))

             Pref_n=(gamma_mix_n-1.0d0)/gamma_mix_n*(VOF_n(i,j,k)*gamma_l*Pref_l/(gamma_l-1.0d0)+(1.0d0-VOF_n(i,j,k))*gamma_g*Pref_g/(gamma_g-1.0d0))
             Pref_new=(gamma_mix_new-1.0d0)/gamma_mix_new*(VOF_new(i,j,k)*gamma_l*Pref_l/(gamma_l-1.0d0)+(1.0d0-VOF_new(i,j,k))*gamma_g*Pref_g/(gamma_g-1.0d0))

	     PA=(gamma_mix_new-1.0d0)*(rhoE(i,j,k)-0.5d0*(rhoU(i,j,k)**2+rhoV(i,j,k)**2+rhoW(i,j,k)**2)/RHO(i,j,k))-gamma_mix_new*Pref_new
	     P_n=(gamma_mix_n-1.0d0)*(rhoE_n(i,j,k)-0.5d0*(rhoU_n(i,j,k)**2+rhoV_n(i,j,k)**2+rhoW_n(i,j,k)**2)/RHO_n(i,j,k))-gamma_mix_n*Pref_n

	     spdsnd=(gamma_mix_n*(P_n+Pref_n)/RHO_n(i,j,k))**0.5d0

		!if(gamma_mix_n*(P_n+Pref_n)/RHO_n(i,j,k).le.0.0d0)then
		!	print*, rhoE_n(i,j,k), rhoU_n(i,j,k), rhoV_n(i,j,k), rhoW_n(i,j,k), gamma_mix_n, P_n, Pref_n, VOF_n(i,j,k)
		!	stop
		!endif
             !P(i,j,k)=(gamma_mix-1.0d0)*(rhoE(i,j,k)-0.5d0*RHO(i,j,k)*(U(i,j,k)**2+V(i,j,k)**2+W(i,j,k)**2))-gamma_mix*my_Pref
             !spdsnd=sqrt(gamma_mix*(P(i,j,k)+my_Pref)/RHO(i,j,k))
 
             alpha(i,j,k) = 1.0d0/(RHO_n(i,j,k)*spdsnd**2*dt_step**2)
	     rhs(i,j,k) = PA/(RHO_n(i,j,k)*spdsnd**2*dt_step**2)-( (Uface(i+1,j,k)-Uface(i,j,k))/(dx(1)*dt_step)+&
						  		   (Vface(i,j+1,k)-Vface(i,j,k))/(dx(2)*dt_step)+&
						  		   (Wface(i,j,k+1)-Wface(i,j,k))/(dx(3)*dt_step) )

          end do
       end do
    end do

  end subroutine helmholtz_rhs

end module rhs_helmholtz
