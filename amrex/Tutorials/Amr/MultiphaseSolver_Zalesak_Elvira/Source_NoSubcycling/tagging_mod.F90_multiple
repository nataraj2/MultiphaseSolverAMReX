module tagging_module

  use iso_c_binding

  use amrex_fort_module
  use amr_data_module

  implicit none

  private

  public :: tag_phi_error

contains

  subroutine tag_phi_error (level, time, lo, hi, phi, philo, phihi, vortmag, tag, taglo, taghi, phierr, &
       settag, cleartag,dx,prob_lo)
    integer, intent(in) :: level, lo(3), hi(3), philo(4), phihi(4), taglo(4), taghi(4)
    real(amrex_real) , intent(in   ) :: phi(philo(1):phihi(1),philo(2):phihi(2),philo(3):phihi(3),ncomp)
    real(amrex_real) , intent(in   ) :: vortmag(philo(1):phihi(1),philo(2):phihi(2),philo(3):phihi(3),1)
    character(kind=c_char), intent(inout) :: tag(taglo(1):taghi(1),taglo(2):taghi(2),taglo(3):taghi(3))
    real(amrex_real), intent(in) :: time, phierr
    character(kind=c_char), intent(in) :: settag, cleartag

    integer :: i,j,k

    real(amrex_real) :: phierr_this
    real(amrex_real) :: dx(3), prob_lo(3), x, y, z, dircoord
    ! phi tolerance and bounds
    double precision, parameter :: VOFlo=0.0000000001d0
    double precision, parameter :: VOFhi=0.9999999999d0
    double precision :: rho_ijk, rho_im1jk, rho_ip1jk, rho_ijkm1, rho_ijkp1, ax,az

    phierr_this = phierr

    if (level >= 1) then
       !
       !  This is here for testing only! 
       !  Remove this if you use this as a template.
       !
       if (time > 0.75_amrex_real .and. time < 1.0_amrex_real) then
          phierr_this = 2.0_amrex_real * phierr
       end if
    end if

    do       k = lo(3), hi(3)
       do    j = lo(2), hi(2)
          do i = lo(1), hi(1)
		x = prob_lo(1) + dx(1) * (dble(i)+0.5d0)
		y = prob_lo(2) + dx(2) * (dble(j)+0.5d0)
		z = prob_lo(3) + dx(3) * (dble(k)+0.5d0)
		dircoord = y
                !if (vortmag(i,j,k,1).ge.5.0d2.and.vortmag(i,j,k,1).lt.5.0d3)then
		!if((z-0.5d0)*(z-1.0d0).le.0.0d0.and.abs(x).le.0.5d0)then
		if(phi(i,j,k,11).gt.0.01.and.phi(i,j,k,11).lt.0.99)then!.and.phi(i,j,k,11).le.phihi)then
		tag(i,j,k) = settag
		endif

          enddo
       enddo
    enddo

    do       k = lo(3)+1, hi(3)-1
       do    j = lo(2)+1, hi(2)-1
          do i = lo(1)+1, hi(1)-1

		rho_ip1jk=(1.0d0-phi(i+1,j,k,11))*phi(i+1,j,k,1)+phi(i+1,j,k,11)*phi(i+1,j,k,6)
		rho_im1jk=(1.0d0-phi(i-1,j,k,11))*phi(i-1,j,k,1)+phi(i-1,j,k,11)*phi(i-1,j,k,6)
		rho_ijkp1=(1.0d0-phi(i,j,k+1,11))*phi(i,j,k+1,1)+phi(i,j,k+1,11)*phi(i,j,k+1,6)
		rho_ijkm1=(1.0d0-phi(i,j,k-1,11))*phi(i,j,k-1,1)+phi(i,j,k+1,11)*phi(i,j,k-1,6)
		rho_ijk=(1.0d0-phi(i,j,k,11))*phi(i,j,k,1)+phi(i,j,k,11)*phi(i,j,k,6)
		ax = ABS(rho_ip1jk - rho_ijk)
                az = ABS(rho_ijkp1 - rho_ijk)
                ax = MAX(ax,ABS(rho_ijk - rho_im1jk))
                az = MAX(az,ABS(rho_ijk - rho_ijkm1))
                if ( MAX(ax,az) .ge. 10.0d0 ) then
		tag(i,j,k) = settag
		endif
          enddo
       enddo
    enddo
 

    
  end subroutine tag_phi_error

end module tagging_module

